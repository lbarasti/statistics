crystal_doc_search_index_callback({"repository_name":"statistics","body":"[![GitHub release](https://img.shields.io/github/release/lbarasti/statistics.svg)](https://github.com/lbarasti/statistics/releases)\n![Build Status](https://github.com/lbarasti/statistics/workflows/build/badge.svg)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Docs](https://img.shields.io/badge/docs-available-brightgreen.svg)](https://lbarasti.github.io/statistics)\n\n# statistics\n\nA statistical library to perform descriptive statistics and generate random values based on popular probability distributions.\n\n## Installation\n\nAdd the dependency to your `shard.yml`:\n\n```yaml\ndependencies:\n  statistics:\n    github: lbarasti/statistics\n```\n\nRun `shards install`\n\n## Usage\n\n```crystal\nrequire \"statistics\"\n```\n\n### Descriptive statistics\nYou can compute mean, variance and standard deviation of a collection as follows.\n```crystal\ninclude Statistics\n\nx = [1, 10, 7]\nmean(x) # 6\nvar(x) # 14\nstd(x) # 3.7416...\n```\n\nIf you'd like to know a bit more about your dataset, you can simply `describe` it\n\n```crystal\nx = (1..1000).map { rand }.to_a # a uniformely distributed dataset\ndescribe(x)\n# {\n#   mean: 0.48, var: 0.08, std: 0.28, \n#   skewness: 0.04, kurtosis: 1.81, \n#   min: 0.01, middle: 0.49, max: 0.99, \n#   q1: 0.24, median: 0.49, q3: 0.73\n# }\n```\n\n`Statistics.describe` returns a `NamedTuple`, so you can extract any value via indexing:\n\n```crystal\nstats = describe(x)\nstats[:q1] # returns the first quartile of your sample\n```\n\nFor a complete list of the statistical functions provided, including `quantile`, `moment` and `skew`, check out the [docs](https://lbarasti.com/statistics/Statistics.html).\n\n### Sampling\nTo work with distributions, import the `Distributions` namespace as follows.\n```crystal\ninclude Statistics::Distributions\n```\n\nNow, here is how we sample values from a normal distribution with `mean = 1.5` and `std = 0.2`.\n```crystal\nNormal.new(1.5, 0.2).rand\n```\n\nWe can generate an iterable of normally distributed random values as follows.\n```crystal\ngen = Normal.new(1.5, 0.2)\n1000.times.map { gen.rand }\n```\n\n#### Supported distributions\nThe following distributions are supported:\n* Constant\n* Exponential\n* Normal\n* Poisson\n* Uniform\n\nDon't see your favourite one on the list? Just fork the repo, add your distribution to the `distributions.cr` file, and open a PR.\n\n## Development\n\nThis shard is a work in progress. Everyone's contribution is welcome.\n\nThe guiding principle at this stage is\n> make it work before you make it right\n\nWhich in this context means: let's not focus on benchmarks and performance, but rather on usability and correctness.\n\n## References\n* [numpy.random](https://numpy.org/devdocs/reference/random/generator.html): distributions and random sampling\n* [numpy statistics](https://numpy.org/devdocs/reference/routines.statistics.html#averages-and-variances): order statistics, averages and variances\n* [scipy stats](https://github.com/scipy/scipy/blob/3de0d58/scipy/stats/stats.py) module and related [tests](https://github.com/scipy/scipy/blob/1150c4c033899a5a4556b7d34d6b137352b36b9e/scipy/stats/tests/test_stats.py) tests\n* [julia random](https://docs.julialang.org/en/v1/stdlib/Random/) module\n* [julia statistics](https://docs.julialang.org/en/v1/stdlib/Statistics/#Statistics.std) module\n* [julia distributions](https://juliastats.org/Distributions.jl/latest/starting/) package.\n* on [skewness and kurtosis](https://brownmath.com/stat/shape.htm), by Stan Brown\n* more on [skewness and kurtosis](https://www.itl.nist.gov/div898/handbook/eda/section3/eda35b.htm), from NIST.\n\n## Contributing\n\n1. Fork it (<https://github.com/lbarasti/statistics/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [lbarasti](https://github.com/lbarasti) - creator and maintainer\n","program":{"html_id":"statistics/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"statistics","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"statistics/Statistics","path":"Statistics.html","kind":"module","full_name":"Statistics","name":"Statistics","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/lib/distributions.cr","line_number":1,"url":null},{"filename":"src/statistics.cr","line_number":6,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.0.1\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"statistics/Statistics","kind":"module","full_name":"Statistics","name":"Statistics"}],"subclasses":[],"including_types":[],"namespace":null,"doc":"Basic descriptive statistics functionality.\n\nMore flexible than a scientific-calculator, but not as exhaustive, yet.","summary":"<p>Basic descriptive statistics functionality.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"bin_count(values:Enumerable,bins:Int32,min=nil,max=nil,edge:Edge=:left,normed:Bool=false):Bins-instance-method","html_id":"bin_count(values:Enumerable,bins:Int32,min=nil,max=nil,edge:Edge=:left,normed:Bool=false):Bins-instance-method","name":"bin_count","doc":"Counts the number of values in each bin of size `(max - min) / bins`.\n\nReturns a `Bins` object where `edges` and `counts` are ordered by edge.\n\nNOTE: Any empty bin will also be included.\n\nParameters\n- values: a one-dimensional dataset.\n- bins: the number of equally-sized bins to divide the datapoints into.\n- min: the left end of the first bin's edge. If none is provided, then `values.min` is used.\n- max: the right end of the last bin's edge. If none is provided, then `values.max` is used.\n- edge: determines whether the left edge of the bin, its mid-point or right edge should be returned.\n  Choices are `:left`, `:centre` and `:right`. Default is `:left`.\n- normed : bool, optional\n  If False, the result will contain the number of samples in each bin. If True, the result is the value of the probability density function at the bin, normalized such that the integral over the range is 1. Note that the sum of the histogram values will not be equal to 1 unless bins of unity width are chosen; it is not a probability mass function.","summary":"<p>Counts the number of values in each bin of size <code>(max - min) / bins</code>.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable"},{"name":"bins","doc":null,"default_value":"","external_name":"bins","restriction":"Int32"},{"name":"min","doc":null,"default_value":"nil","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"nil","external_name":"max","restriction":""},{"name":"edge","doc":null,"default_value":":left","external_name":"edge","restriction":"Edge"},{"name":"normed","doc":null,"default_value":"false","external_name":"normed","restriction":"Bool"}],"args_string":"(values : Enumerable, bins : Int32, min = <span class=\"n\">nil</span>, max = <span class=\"n\">nil</span>, edge : Edge = <span class=\"n\">:left</span>, normed : Bool = <span class=\"n\">false</span>) : Bins","args_html":"(values : Enumerable, bins : Int32, min = <span class=\"n\">nil</span>, max = <span class=\"n\">nil</span>, edge : Edge = <span class=\"n\">:left</span>, normed : Bool = <span class=\"n\">false</span>) : Bins","location":{"filename":"src/statistics.cr","line_number":69,"url":null},"def":{"name":"bin_count","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable"},{"name":"bins","doc":null,"default_value":"","external_name":"bins","restriction":"Int32"},{"name":"min","doc":null,"default_value":"nil","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"nil","external_name":"max","restriction":""},{"name":"edge","doc":null,"default_value":":left","external_name":"edge","restriction":"Edge"},{"name":"normed","doc":null,"default_value":"false","external_name":"normed","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bins","visibility":"Public","body":"if min.nil? || max.nil?\n  sample_min, sample_max = values.minmax\n  if min.nil?\n    min = sample_min\n  end\n  if max.nil?\n    max = sample_max\n  end\nend\ncounter = Array(Int32).new(size: bins, value: 0)\nstep = (max - min) / bins\nsize = values.size\nvalues.each do |v|\n  idx = v == max ? bins - 1 : ((v - min) / step).floor.to_i\n  __temp_26 = idx\n  counter[__temp_26] = counter[__temp_26] + 1\nend\nedges = Array.new(bins) do |i|\n  min + (i * step)\nend\nadjusted_edges = (case edge\nwhen .left?\n  edges\nwhen .centre?\n  edges.map(&.+(step / 2))\nwhen .right?\n  edges.map(&.+(step))\nend).not_nil!\nadjusted_counts = normed ? counter.map do |c|\n  (c / size) / step\nend : counter\nBins.new(edges: adjusted_edges, counts: adjusted_counts, step: step)\n"}},{"id":"describe(values)-instance-method","html_id":"describe(values)-instance-method","name":"describe","doc":"Computes several descriptive statistics of the passed array.\n\nParameters\n- values: a one-dimensional dataset.","summary":"<p>Computes several descriptive statistics of the passed array.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(values)","args_html":"(values)","location":{"filename":"src/statistics.cr","line_number":14,"url":null},"def":{"name":"describe","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size = values.size\nsorted = values.sort\n{mean: mean(values), var: var(values), std: std(values), skewness: skew(values), kurtosis: kurtosis(values), min: sorted.first, middle: middle(sorted), max: sorted.last, q1: quantile(sorted, 0.25, sorted: true), median: median(sorted, sorted: true), q3: quantile(sorted, 0.75, sorted: true)}\n"}},{"id":"frequency(values:Enumerable(T))forallT-instance-method","html_id":"frequency(values:Enumerable(T))forallT-instance-method","name":"frequency","doc":"Computes the number of occurrences of each value in the dataset.\n\nReturns a Hash with each the dataset values as keys and the number of times they appear as value.\n\nParameters\n- values: a one-dimensional dataset.","summary":"<p>Computes the number of occurrences of each value in the dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"args_string":"(values : Enumerable(T)) forall T","args_html":"(values : Enumerable(T)) forall T","location":{"filename":"src/statistics.cr","line_number":38,"url":null},"def":{"name":"frequency","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"values.reduce(Hash(T, Int32).new(0)) do |freq, v|\n  __temp_24 = v\n  freq[__temp_24] = freq[__temp_24] + 1\n  freq\nend"}},{"id":"kurtosis(values,corrected=false,excess=false)-instance-method","html_id":"kurtosis(values,corrected=false,excess=false)-instance-method","name":"kurtosis","doc":"Computes the kurtosis of a dataset.\n\nParameters\n- values: a one-dimensional dataset.\n- corrected: when set to `true`, then the calculations are corrected for statistical bias. Default is `false`.\n- excess: when set to `true`, computes the [excess kurtosis](https://en.wikipedia.org/wiki/Kurtosis#Excess_kurtosis). Default is `false`.\n\nThis implementation is based on the [scipy/stats.py](https://github.com/scipy/scipy/blob/3de0d58/scipy/stats/stats.py#L1142).","summary":"<p>Computes the kurtosis of a dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""},{"name":"excess","doc":null,"default_value":"false","external_name":"excess","restriction":""}],"args_string":"(values, corrected = <span class=\"n\">false</span>, excess = <span class=\"n\">false</span>)","args_html":"(values, corrected = <span class=\"n\">false</span>, excess = <span class=\"n\">false</span>)","location":{"filename":"src/statistics.cr","line_number":108,"url":null},"def":{"name":"kurtosis","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""},{"name":"excess","doc":null,"default_value":"false","external_name":"excess","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"n = values.size\nm = mean(values)\nm4 = moment(values, m, 4)\nm2 = moment(values, m, 2)\nkurt = if corrected\n  (((1 / (n - 2)) / (n - 3)) * (((((n ** 2) - 1) * m4) / (m2 ** 2)) - (3 * ((n - 1) ** 2)))) + 3\nelse\n  m4 / (m2 ** 2)\nend\nexcess ? kurt - 3 : kurt\n"}},{"id":"mean(values)-instance-method","html_id":"mean(values)-instance-method","name":"mean","doc":"Computes the mean of a dataset.\n\nParameters\n- values: a one-dimensional dataset.","summary":"<p>Computes the mean of a dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(values)","args_html":"(values)","location":{"filename":"src/statistics.cr","line_number":127,"url":null},"def":{"name":"mean","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(values.reduce(0) do |acc, v|\n  acc + v\nend) / values.size"}},{"id":"median(values,sorted=false)-instance-method","html_id":"median(values,sorted=false)-instance-method","name":"median","doc":"Computes the median of all elements in a dataset.\n\nFor an even number of elements the mean of the two median elements will be computed.\n\nParameters\n- values: a one-dimensional dataset.\n- sorted: when `true`, the computations assume that the provided values are\n  sorted. Default is `false`.\n\nSee Julia's [Statistics.median](https://docs.julialang.org/en/v1/stdlib/Statistics/#Statistics.median).","summary":"<p>Computes the median of all elements in a dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"sorted","doc":null,"default_value":"false","external_name":"sorted","restriction":""}],"args_string":"(values, sorted = <span class=\"n\">false</span>)","args_html":"(values, sorted = <span class=\"n\">false</span>)","location":{"filename":"src/statistics.cr","line_number":141,"url":null},"def":{"name":"median","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"sorted","doc":null,"default_value":"false","external_name":"sorted","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size = values.size\nmid = size // 2\nsorted_values = sorted ? values : values.sort\nif size.odd?\n  sorted_values[mid]\nelse\n  middle([sorted_values[mid - 1], sorted_values[mid]])\nend\n"}},{"id":"middle(a,b)-instance-method","html_id":"middle(a,b)-instance-method","name":"middle","doc":"Computes the middle of two values `a` and `b`.","summary":"<p>Computes the middle of two values <code>a</code> and <code>b</code>.</p>","abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":""}],"args_string":"(a, b)","args_html":"(a, b)","location":{"filename":"src/statistics.cr","line_number":166,"url":null},"def":{"name":"middle","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":""},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"0.5 * (a + b)"}},{"id":"middle(values)-instance-method","html_id":"middle(values)-instance-method","name":"middle","doc":"Computes the middle of an array `a`, which consists of finding its\nextrema and then computing their mean.\n\nParameters\n- values: a one-dimensional dataset.\n\nSee Julia's [Statistics.middle](https://docs.julialang.org/en/v1/stdlib/Statistics/#Statistics.middle).","summary":"<p>Computes the middle of an array <code>a</code>, which consists of finding its extrema and then computing their mean.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(values)","args_html":"(values)","location":{"filename":"src/statistics.cr","line_number":160,"url":null},"def":{"name":"middle","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"min, max = values.minmax\nmiddle(min, max)\n"}},{"id":"mode(values:Enumerable)-instance-method","html_id":"mode(values:Enumerable)-instance-method","name":"mode","doc":"Computes the modal (most common) value in a dataset.\n\nReturns a pair with the modal value and the bin-count for the modal bin.\nIf there is more than one such value, no guarantees are made which one will be picked.\nNOTE: Computing the mode requires traversing the entire dataset.\n\nParameters\n- values: a one-dimensional dataset.","summary":"<p>Computes the modal (most common) value in a dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable"}],"args_string":"(values : Enumerable)","args_html":"(values : Enumerable)","location":{"filename":"src/statistics.cr","line_number":178,"url":null},"def":{"name":"mode","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"Enumerable"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(frequency(values)).max_by(&.last)"}},{"id":"moment(values,mean=nil,n=1)-instance-method","html_id":"moment(values,mean=nil,n=1)-instance-method","name":"moment","doc":"Calculates the n-th moment about the mean for a sample.\n\nParameters\n- values: a one-dimensional dataset.\n- mean: a pre-computed mean. If a mean is not provided, then the sample's\n  mean will be computed. Default is `nil`.\n- n: order of central moment that is returned. Default is `1`.","summary":"<p>Calculates the n-th moment about the mean for a sample.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"mean","doc":null,"default_value":"nil","external_name":"mean","restriction":""},{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"args_string":"(values, mean = <span class=\"n\">nil</span>, n = <span class=\"n\">1</span>)","args_html":"(values, mean = <span class=\"n\">nil</span>, n = <span class=\"n\">1</span>)","location":{"filename":"src/statistics.cr","line_number":189,"url":null},"def":{"name":"moment","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"mean","doc":null,"default_value":"nil","external_name":"mean","restriction":""},{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"m = mean || (Statistics.mean(values))\n(values.reduce(0) do |a, b|\n  a + ((b - m) ** n)\nend) / values.size\n"}},{"id":"quantile(values,p,sorted=false)-instance-method","html_id":"quantile(values,p,sorted=false)-instance-method","name":"quantile","doc":"Computes the quantile of a dataset at a specified probability `p` on the interval [0,1].\n\nQuantiles are computed via linear interpolation between the points `((k-1)/(n-1), v[k])`,\nfor `k = 1:n` where `n = values.size`.\n\nParameters\n- values: a one-dimensional dataset.\n- p: probability. Values of `p` should be in the interval `[0, 1]`.\n- sorted indicates whether values can be assumed to be sorted.\n\nImplementation based on Julia's [Statistics.quantile](https://docs.julialang.org/en/v1/stdlib/Statistics/#Statistics.quantile).","summary":"<p>Computes the quantile of a dataset at a specified probability <code>p</code> on the interval [0,1].</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""},{"name":"sorted","doc":null,"default_value":"false","external_name":"sorted","restriction":""}],"args_string":"(values, p, sorted = <span class=\"n\">false</span>)","args_html":"(values, p, sorted = <span class=\"n\">false</span>)","location":{"filename":"src/statistics.cr","line_number":205,"url":null},"def":{"name":"quantile","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":""},{"name":"sorted","doc":null,"default_value":"false","external_name":"sorted","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sorted_values = sorted ? values : values.sort\nn = values.size\naleph = (n - 1) * p\nj = (clamp(aleph.floor, 0, n - 2)).to_i\ngamma = clamp(aleph - j, 0, 1)\na = sorted_values[j]\nb = sorted_values[j + 1]\na + ((b - a) * gamma)\n"}},{"id":"skew(values,corrected=false)-instance-method","html_id":"skew(values,corrected=false)-instance-method","name":"skew","doc":"Computes the skewness of a dataset.\n\nParameters\n- values: a one-dimensional dataset.\n- corrected: when set to `true`, then the calculations are corrected for statistical bias. Default is `false`.\n\nThis implementation is based on the [scipy/stats.py](https://github.com/scipy/scipy/blob/3de0d58/scipy/stats/stats.py#L1039).","summary":"<p>Computes the skewness of a dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""}],"args_string":"(values, corrected = <span class=\"n\">false</span>)","args_html":"(values, corrected = <span class=\"n\">false</span>)","location":{"filename":"src/statistics.cr","line_number":225,"url":null},"def":{"name":"skew","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"n = values.size\nm = mean(values)\nm3 = moment(values, m, 3)\nm2 = moment(values, m, 2)\ncorrection_factor = corrected ? (Math.sqrt((n - 1.0) * n)) / (n - 2.0) : 1\n(correction_factor * m3) / (m2 ** 1.5)\n"}},{"id":"std(values,mean=nil,corrected=false)-instance-method","html_id":"std(values,mean=nil,corrected=false)-instance-method","name":"std","doc":"Computes the standard deviation of a dataset.\n\nParameters\n- values: a one-dimensional dataset.\n- mean: a pre-computed mean. This could be a pre-computed sample's mean\n  or the population's known mean. If a mean is not provided, then the sample's\n  mean will be computed. Default is `nil`.\n- corrected: when set to `true`, then the sum of squares is scaled\n  with `values.size - 1`, rather than with `values.size`. Default is `false`.","summary":"<p>Computes the standard deviation of a dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"mean","doc":null,"default_value":"nil","external_name":"mean","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""}],"args_string":"(values, mean = <span class=\"n\">nil</span>, corrected = <span class=\"n\">false</span>)","args_html":"(values, mean = <span class=\"n\">nil</span>, corrected = <span class=\"n\">false</span>)","location":{"filename":"src/statistics.cr","line_number":243,"url":null},"def":{"name":"std","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"mean","doc":null,"default_value":"nil","external_name":"mean","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Math.sqrt(var(values, mean, corrected))"}},{"id":"var(values,mean=nil,corrected=false)-instance-method","html_id":"var(values,mean=nil,corrected=false)-instance-method","name":"var","doc":"Computes the variance of a dataset.\n\nParameters\n- values: a one-dimensional dataset.\n- mean: a pre-computed mean. This could be a pre-computed sample's mean\n  or the population's known mean. If a mean is not provided, then the sample's\n  mean will be computed. Default is `nil`.\n- corrected: when set to `true`, then the sum of squares is scaled\n  with `values.size - 1`, rather than with `values.size`. Default is `false`.","summary":"<p>Computes the variance of a dataset.</p>","abstract":false,"args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"mean","doc":null,"default_value":"nil","external_name":"mean","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""}],"args_string":"(values, mean = <span class=\"n\">nil</span>, corrected = <span class=\"n\">false</span>)","args_html":"(values, mean = <span class=\"n\">nil</span>, corrected = <span class=\"n\">false</span>)","location":{"filename":"src/statistics.cr","line_number":256,"url":null},"def":{"name":"var","args":[{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""},{"name":"mean","doc":null,"default_value":"nil","external_name":"mean","restriction":""},{"name":"corrected","doc":null,"default_value":"false","external_name":"corrected","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"correction_factor = corrected ? values.size / (values.size - 1) : 1\n(moment(values, mean, 2)) * correction_factor\n"}}],"macros":[],"types":[{"html_id":"statistics/Statistics/Distributions","path":"Statistics/Distributions.html","kind":"module","full_name":"Statistics::Distributions","name":"Distributions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/lib/distributions.cr","line_number":2,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"statistics/Statistics","kind":"module","full_name":"Statistics","name":"Statistics"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"statistics/Statistics/Distributions/Bernoulli","path":"Statistics/Distributions/Bernoulli.html","kind":"class","full_name":"Statistics::Distributions::Bernoulli","name":"Bernoulli","abstract":false,"superclass":{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution","name":"DiscreteDistribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution","name":"DiscreteDistribution"},{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":23,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":"The discrete probability distribution of a random variable which takes\nthe value 1 with probability `p` and the value 0 with probability\n`q=1-p` (source: [wikipedia](https://en.wikipedia.org/wiki/Bernoulli_distribution)).","summary":"<p>The discrete probability distribution of a random variable which takes the value 1 with probability <code>p</code> and the value 0 with probability <code>q=1-p</code> (source: <a href=\"https://en.wikipedia.org/wiki/Bernoulli_distribution\">wikipedia</a>).</p>","class_methods":[],"constructors":[{"id":"new(p:Float64)-class-method","html_id":"new(p:Float64)-class-method","name":"new","doc":"Creates Bernoulli distribution with success rate `p`.","summary":"<p>Creates Bernoulli distribution with success rate <code>p</code>.</p>","abstract":false,"args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Float64"}],"args_string":"(p : Float64)","args_html":"(p : Float64)","location":{"filename":"src/lib/distributions.cr","line_number":25,"url":null},"def":{"name":"new","args":[{"name":"p","doc":null,"default_value":"","external_name":"p","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(p)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"pmf(x)-instance-method","html_id":"pmf(x)-instance-method","name":"pmf","doc":"The Probability Mass Function (PMF) of a discrete\nrandom variable.","summary":"<p>The Probability Mass Function (PMF) of a discrete random variable.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":28,"url":null},"def":{"name":"pmf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case x\nwhen 1\n  @p\nwhen 0\n  1 - @p\nelse\n  0\nend"}},{"id":"rand:Int32-instance-method","html_id":"rand:Int32-instance-method","name":"rand","doc":"Samples a random variable with the given distribution.","summary":"<p>Samples a random variable with the given distribution.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/lib/distributions.cr","line_number":36,"url":null},"def":{"name":"rand","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"::rand <= @p ? 1 : 0"}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/Constant","path":"Statistics/Distributions/Constant.html","kind":"class","full_name":"Statistics::Distributions::Constant","name":"Constant","abstract":false,"superclass":{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution","name":"DiscreteDistribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution","name":"DiscreteDistribution"},{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":42,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":"Represents a deterministic distribution taking a single value.","summary":"<p>Represents a deterministic distribution taking a single value.</p>","class_methods":[],"constructors":[{"id":"new(krand:Float64)-class-method","html_id":"new(krand:Float64)-class-method","name":"new","doc":"Creates a degenerate distribution which only takes the value `k`.","summary":"<p>Creates a degenerate distribution which only takes the value <code>k</code>.</p>","abstract":false,"args":[{"name":"rand","doc":null,"default_value":"","external_name":"k","restriction":"Float64"}],"args_string":"(k rand : Float64)","args_html":"(k rand : Float64)","location":{"filename":"src/lib/distributions.cr","line_number":50,"url":null},"def":{"name":"new","args":[{"name":"rand","doc":null,"default_value":"","external_name":"k","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(rand)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"pmf(x)-instance-method","html_id":"pmf(x)-instance-method","name":"pmf","doc":"The Probability Mass Function (PMF) of a discrete\nrandom variable.","summary":"<p>The Probability Mass Function (PMF) of a discrete random variable.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":45,"url":null},"def":{"name":"pmf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x == @rand ? 1.0 : 0.0"}},{"id":"rand:Float64-instance-method","html_id":"rand:Float64-instance-method","name":"rand","doc":"Samples a random variable with the given distribution.","summary":"<p>Samples a random variable with the given distribution.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/lib/distributions.cr","line_number":43,"url":null},"def":{"name":"rand","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@rand"}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","path":"Statistics/Distributions/ContinuousDistribution.html","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution","abstract":true,"superclass":{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":14,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"statistics/Statistics/Distributions/Exponential","kind":"class","full_name":"Statistics::Distributions::Exponential","name":"Exponential"},{"html_id":"statistics/Statistics/Distributions/Normal","kind":"class","full_name":"Statistics::Distributions::Normal","name":"Normal"},{"html_id":"statistics/Statistics/Distributions/Uniform","kind":"class","full_name":"Statistics::Distributions::Uniform","name":"Uniform"}],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"pdf(x)-instance-method","html_id":"pdf(x)-instance-method","name":"pdf","doc":"The Probability Density Function (PDF) of a continuous\nrandom variable.","summary":"<p>The Probability Density Function (PDF) of a continuous random variable.</p>","abstract":true,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":17,"url":null},"def":{"name":"pdf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","path":"Statistics/Distributions/DiscreteDistribution.html","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution(T)","name":"DiscreteDistribution","abstract":true,"superclass":{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":8,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"statistics/Statistics/Distributions/Bernoulli","kind":"class","full_name":"Statistics::Distributions::Bernoulli","name":"Bernoulli"},{"html_id":"statistics/Statistics/Distributions/Constant","kind":"class","full_name":"Statistics::Distributions::Constant","name":"Constant"},{"html_id":"statistics/Statistics/Distributions/Poisson","kind":"class","full_name":"Statistics::Distributions::Poisson","name":"Poisson"}],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"pmf(x)-instance-method","html_id":"pmf(x)-instance-method","name":"pmf","doc":"The Probability Mass Function (PMF) of a discrete\nrandom variable.","summary":"<p>The Probability Mass Function (PMF) of a discrete random variable.</p>","abstract":true,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":11,"url":null},"def":{"name":"pmf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/Distribution","path":"Statistics/Distributions/Distribution.html","kind":"class","full_name":"Statistics::Distributions::Distribution(T)","name":"Distribution","abstract":true,"superclass":{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":3,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution"},{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution(T)","name":"DiscreteDistribution"}],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"id":"rand:T-instance-method","html_id":"rand:T-instance-method","name":"rand","doc":"Samples a random variable with the given distribution.","summary":"<p>Samples a random variable with the given distribution.</p>","abstract":true,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/lib/distributions.cr","line_number":5,"url":null},"def":{"name":"rand","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/Exponential","path":"Statistics/Distributions/Exponential.html","kind":"class","full_name":"Statistics::Distributions::Exponential","name":"Exponential","abstract":false,"superclass":{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution"},{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":59,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":"Represents the probability distribution of the time between events in\na Poisson point process, i.e., a process in which events occur continuously\nand independently at a constant average rate.\n\nSee [wikipedia](https://en.wikipedia.org/wiki/Exponential_distribution) for more details.","summary":"<p>Represents the probability distribution of the time between events in a Poisson point process, i.e., a process in which events occur continuously and independently at a constant average rate.</p>","class_methods":[],"constructors":[{"id":"new(lambda:Float64)-class-method","html_id":"new(lambda:Float64)-class-method","name":"new","doc":"Creates an exponential distribution with a rate parameter `lambda`.","summary":"<p>Creates an exponential distribution with a rate parameter <code>lambda</code>.</p>","abstract":false,"args":[{"name":"lambda","doc":null,"default_value":"","external_name":"lambda","restriction":"Float64"}],"args_string":"(lambda : Float64)","args_html":"(lambda : Float64)","location":{"filename":"src/lib/distributions.cr","line_number":61,"url":null},"def":{"name":"new","args":[{"name":"lambda","doc":null,"default_value":"","external_name":"lambda","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(lambda)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"pdf(x)-instance-method","html_id":"pdf(x)-instance-method","name":"pdf","doc":"The Probability Density Function (PDF) of a continuous\nrandom variable.","summary":"<p>The Probability Density Function (PDF) of a continuous random variable.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":64,"url":null},"def":{"name":"pdf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if x < 0\n  return 0.0\nend\n@lambda * (Math.exp((-@lambda) * x))\n"}},{"id":"rand:Float64-instance-method","html_id":"rand:Float64-instance-method","name":"rand","doc":"Samples a random variable with the given distribution.","summary":"<p>Samples a random variable with the given distribution.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/lib/distributions.cr","line_number":70,"url":null},"def":{"name":"rand","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(-(Math.log(::rand))) / @lambda"}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/Normal","path":"Statistics/Distributions/Normal.html","kind":"class","full_name":"Statistics::Distributions::Normal","name":"Normal","abstract":false,"superclass":{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution"},{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":81,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"PDF_COEFFICIENT","name":"PDF_COEFFICIENT","value":"1 / (Math.sqrt(TWO_PI))","doc":null,"summary":null},{"id":"TWO_PI","name":"TWO_PI","value":"2 * Math::PI","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":"Represents a normal distribution.\n\nSee [wikipedia](https://en.wikipedia.org/wiki/Normal_distribution) for more details.","summary":"<p>Represents a normal distribution.</p>","class_methods":[],"constructors":[{"id":"new(mean:Float64=0,std:Float64=1)-class-method","html_id":"new(mean:Float64=0,std:Float64=1)-class-method","name":"new","doc":"Creates a normal distribution with the given `mean` and `std`.","summary":"<p>Creates a normal distribution with the given <code>mean</code> and <code>std</code>.</p>","abstract":false,"args":[{"name":"mean","doc":null,"default_value":"0","external_name":"mean","restriction":"Float64"},{"name":"std","doc":null,"default_value":"1","external_name":"std","restriction":"Float64"}],"args_string":"(mean : Float64 = <span class=\"n\">0</span>, std : Float64 = <span class=\"n\">1</span>)","args_html":"(mean : Float64 = <span class=\"n\">0</span>, std : Float64 = <span class=\"n\">1</span>)","location":{"filename":"src/lib/distributions.cr","line_number":86,"url":null},"def":{"name":"new","args":[{"name":"mean","doc":null,"default_value":"0","external_name":"mean","restriction":"Float64"},{"name":"std","doc":null,"default_value":"1","external_name":"std","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(mean, std)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"pdf(x)-instance-method","html_id":"pdf(x)-instance-method","name":"pdf","doc":"The Probability Density Function (PDF) of a continuous\nrandom variable.","summary":"<p>The Probability Density Function (PDF) of a continuous random variable.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":89,"url":null},"def":{"name":"pdf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"exponent = -0.5 * (((x - @mean) / @std) ** 2)\n(PDF_COEFFICIENT / @std) * (Math.exp(exponent))\n"}},{"id":"rand:Float64-instance-method","html_id":"rand:Float64-instance-method","name":"rand","doc":"Samples a random variable with the given distribution.","summary":"<p>Samples a random variable with the given distribution.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/lib/distributions.cr","line_number":94,"url":null},"def":{"name":"rand","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"v = (Math.sqrt(-2 * (Math.log(::rand)))) * (Math.sin(TWO_PI * ::rand))\n(v * @std) + @mean\n"}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/Poisson","path":"Statistics/Distributions/Poisson.html","kind":"class","full_name":"Statistics::Distributions::Poisson","name":"Poisson","abstract":false,"superclass":{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution","name":"DiscreteDistribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/DiscreteDistribution","kind":"class","full_name":"Statistics::Distributions::DiscreteDistribution","name":"DiscreteDistribution"},{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":107,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":"Represents a discrete probability distribution that expresses\nthe probability of a given number of events occurring in a\nfixed interval of time or space if these events occur with a\nknown constant mean rate and independently of the time since\nthe last event (source: [wikipedia](https://en.wikipedia.org/wiki/Poisson_distribution))","summary":"<p>Represents a discrete probability distribution that expresses the probability of a given number of events occurring in a fixed interval of time or space if these events occur with a known constant mean rate and independently of the time since the last event (source: <a href=\"https://en.wikipedia.org/wiki/Poisson_distribution\">wikipedia</a>)</p>","class_methods":[],"constructors":[{"id":"new(lambda:Float64)-class-method","html_id":"new(lambda:Float64)-class-method","name":"new","doc":"Creates a Poisson distribution with expected value `lambda`.","summary":"<p>Creates a Poisson distribution with expected value <code>lambda</code>.</p>","abstract":false,"args":[{"name":"lambda","doc":null,"default_value":"","external_name":"lambda","restriction":"Float64"}],"args_string":"(lambda : Float64)","args_html":"(lambda : Float64)","location":{"filename":"src/lib/distributions.cr","line_number":109,"url":null},"def":{"name":"new","args":[{"name":"lambda","doc":null,"default_value":"","external_name":"lambda","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(lambda)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"pmf(x)-instance-method","html_id":"pmf(x)-instance-method","name":"pmf","doc":"The Probability Mass Function (PMF) of a discrete\nrandom variable.","summary":"<p>The Probability Mass Function (PMF) of a discrete random variable.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":112,"url":null},"def":{"name":"pmf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (x - (x.round(0))) != 0\n  return 0.0\nend\nif x < 0\n  return 0.0\nend\nacc = 1\nx.to_i.times do |i|\n  acc = (acc * @lambda) / (i + 1)\nend\nacc * (Math.exp(-@lambda))\n"}},{"id":"rand:Int32-instance-method","html_id":"rand:Int32-instance-method","name":"rand","doc":"Samples a random variable with the given distribution.","summary":"<p>Samples a random variable with the given distribution.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/lib/distributions.cr","line_number":122,"url":null},"def":{"name":"rand","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"x = 0\np = Math.exp(-@lambda)\ns = p\nu = ::rand\nwhile u > s\n  x = x + 1\n  p = p * (@lambda / x)\n  s = s + p\nend\nx\n"}}],"macros":[],"types":[]},{"html_id":"statistics/Statistics/Distributions/Uniform","path":"Statistics/Distributions/Uniform.html","kind":"class","full_name":"Statistics::Distributions::Uniform","name":"Uniform","abstract":false,"superclass":{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution"},"ancestors":[{"html_id":"statistics/Statistics/Distributions/ContinuousDistribution","kind":"class","full_name":"Statistics::Distributions::ContinuousDistribution","name":"ContinuousDistribution"},{"html_id":"statistics/Statistics/Distributions/Distribution","kind":"class","full_name":"Statistics::Distributions::Distribution","name":"Distribution"},{"html_id":"statistics/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"statistics/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/lib/distributions.cr","line_number":143,"url":null}],"repository_name":"statistics","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"statistics/Statistics/Distributions","kind":"module","full_name":"Statistics::Distributions","name":"Distributions"},"doc":"Represents a continuous uniform distribution.\n\nSee [wikipedia](https://en.wikipedia.org/wiki/Uniform_distribution_(continuous).","summary":"<p>Represents a continuous uniform distribution.</p>","class_methods":[],"constructors":[{"id":"new(min:Float64,max:Float64)-class-method","html_id":"new(min:Float64,max:Float64)-class-method","name":"new","doc":"Creates a uniform distribution within the interval [`min`, `max`].","summary":"<p>Creates a uniform distribution within the interval [<code>min</code>, <code>max</code>].</p>","abstract":false,"args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Float64"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Float64"}],"args_string":"(min : Float64, max : Float64)","args_html":"(min : Float64, max : Float64)","location":{"filename":"src/lib/distributions.cr","line_number":147,"url":null},"def":{"name":"new","args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Float64"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(min, max)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"pdf(x)-instance-method","html_id":"pdf(x)-instance-method","name":"pdf","doc":"The Probability Density Function (PDF) of a continuous\nrandom variable.","summary":"<p>The Probability Density Function (PDF) of a continuous random variable.</p>","abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"args_string":"(x)","args_html":"(x)","location":{"filename":"src/lib/distributions.cr","line_number":151,"url":null},"def":{"name":"pdf","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @min <= x && x <= @max\n  1 / @interval\nelse\n  0.0\nend"}},{"id":"rand:Float64-instance-method","html_id":"rand:Float64-instance-method","name":"rand","doc":"Samples a random variable with the given distribution.","summary":"<p>Samples a random variable with the given distribution.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/lib/distributions.cr","line_number":159,"url":null},"def":{"name":"rand","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@min + (::rand * @interval)"}}],"macros":[],"types":[]}]}]}]}})